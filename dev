#!/bin/bash
###############################################################################
# Zyron-Ai Development Orchestrator
# Universal entry point for development tasks
# Usage: ./dev [command] [options]
###############################################################################

set -euo pipefail

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
export PATH="$PROJECT_ROOT/backend/.venv/bin:$PATH"

# Helper functions
print_header() {
    echo ""
    echo -e "${BLUE}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${NC}  $1"
    echo -e "${BLUE}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_section() {
    echo -e "${CYAN}━━━ $1 ━━━${NC}"
}

success() {
    echo -e "${GREEN}✓${NC} $@"
}

error() {
    echo -e "${RED}✗${NC} Error: $@" >&2
}

warning() {
    echo -e "${YELLOW}⚠${NC} $@"
}

info() {
    echo -e "${BLUE}ℹ${NC} $@"
}

# Commands
cmd_help() {
    print_header "Zyron-Ai Development Commands"

    echo -e "${MAGENTA}Available Commands:${NC}"
    echo ""
    echo -e "  ${GREEN}dev${NC}              Start both servers (recommended)"
    echo -e "  ${GREEN}backend${NC}          Start backend server (port 8000)"
    echo -e "  ${GREEN}frontend${NC}         Start frontend server (port 5173)"
    echo -e "  ${GREEN}logs${NC}             Follow backend logs"
    echo -e "  ${GREEN}status${NC}           Show server status"
    echo -e "  ${GREEN}health${NC}           Health check all servers"
    echo -e "  ${GREEN}stop${NC}             Stop all servers"
    echo -e "  ${GREEN}restart${NC}          Restart all servers"
    echo -e "  ${GREEN}clean${NC}            Clean temp files"
    echo -e "  ${GREEN}install${NC}          Install all dependencies"
    echo -e "  ${GREEN}setup${NC}            Complete setup (install + git)"
    echo ""
    echo -e "${MAGENTA}Advanced Commands:${NC}"
    echo ""
    echo -e "  ${GREEN}backend-kill${NC}     Force kill backend"
    echo -e "  ${GREEN}backend-status${NC}   Detailed backend status"
    echo -e "  ${GREEN}docs${NC}             Open documentation"
    echo -e "  ${GREEN}shell${NC}            Open interactive shell"
    echo ""
    echo -e "${MAGENTA}Options:${NC}"
    echo ""
    echo -e "  ${GREEN}--help${NC}           Show this message"
    echo -e "  ${GREEN}--verbose${NC}        Enable verbose output"
    echo ""
    echo -e "${MAGENTA}Examples:${NC}"
    echo ""
    echo -e "  ${CYAN}./dev${NC}                    # Start both servers"
    echo -e "  ${CYAN}./dev backend${NC}            # Start backend only"
    echo -e "  ${CYAN}./dev logs${NC}               # Follow backend logs"
    echo -e "  ${CYAN}./dev status${NC}             # Check server status"
    echo ""
}

cmd_dev() {
    print_header "Starting Zyron-Ai Development Environment"
    info "Starting both backend and frontend servers"
    info "Open another terminal for separate server control"
    echo ""
    make -j2 backend frontend
}

cmd_backend() {
    print_header "Starting Backend Server"
    cd "$PROJECT_ROOT/backend"
    python manage_server.py start --port 8000
}

cmd_backend_kill() {
    print_header "Force Killing Backend"
    cd "$PROJECT_ROOT/backend"
    python manage_server.py kill --port 8000
    success "Backend killed"
}

cmd_backend_status() {
    print_header "Backend Status"
    cd "$PROJECT_ROOT/backend"
    python manage_server.py status
}

cmd_frontend() {
    print_header "Starting Frontend Server"
    cd "$PROJECT_ROOT/frontend"
    npm run dev
}

cmd_logs() {
    print_header "Following Backend Logs"
    tail -f "$PROJECT_ROOT/logs/backend.log" 2>/dev/null || \
        error "No logs found. Start the server first with './dev backend'"
}

cmd_status() {
    print_header "Server Status"

    print_section "Backend"
    if ps aux | grep -E "[u]vicorn.*8000" > /dev/null 2>&1; then
        success "Backend running on port 8000"
    else
        warning "Backend not running"
    fi

    echo ""
    print_section "Frontend"
    if lsof -i :5173 > /dev/null 2>&1; then
        success "Frontend running on port 5173"
    else
        warning "Frontend not running"
    fi

    echo ""
    print_section "Detailed Status"
    cd "$PROJECT_ROOT/backend"
    python manage_server.py status
}

cmd_health() {
    print_header "Health Check"

    print_section "Backend Health"
    if curl -s -m 2 http://127.0.0.1:8000/health > /dev/null 2>&1; then
        response=$(curl -s http://127.0.0.1:8000/health)
        success "Backend responding: $response"
    else
        error "Backend not responding"
    fi

    echo ""
    print_section "Frontend Health"
    if curl -s -m 2 http://localhost:5173 > /dev/null 2>&1; then
        success "Frontend responding"
    else
        error "Frontend not responding"
    fi
}

cmd_stop() {
    print_header "Stopping All Servers"
    pkill -f "uvicorn" || true
    pkill -f "vite" || true
    sleep 2
    success "All servers stopped"
}

cmd_restart() {
    print_header "Restarting Servers"
    cmd_stop
    sleep 1
    cd "$PROJECT_ROOT"
    make backend &
    make frontend &
    success "Servers restarting..."
}

cmd_clean() {
    print_header "Cleaning Temporary Files"
    rm -rf "$PROJECT_ROOT/logs"/*.log "$PROJECT_ROOT/logs"/*.json
    rm -rf "$PROJECT_ROOT/backend/__pycache__"
    rm -rf "$PROJECT_ROOT/frontend/dist"
    success "Cleanup complete"
}

cmd_install() {
    print_header "Installing Dependencies"

    print_section "Backend Dependencies"
    cd "$PROJECT_ROOT/backend"
    python -m venv .venv || true
    .venv/bin/pip install --upgrade pip
    .venv/bin/pip install -r requirements.txt
    success "Backend dependencies installed"

    echo ""
    print_section "Frontend Dependencies"
    cd "$PROJECT_ROOT/frontend"
    npm install
    success "Frontend dependencies installed"
}

cmd_setup() {
    print_header "Project Setup"

    cmd_install

    echo ""
    print_section "Git Repository"
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        cd "$PROJECT_ROOT"
        git init
        git config user.email "dev@zyron-ai.local"
        git config user.name "Zyron Developer"
        git add .
        git commit -m "Initial Zyron-Oryze setup"
        success "Git repository initialized"
    else
        warning "Git repository already initialized"
    fi

    echo ""
    print_header "Setup Complete!"
    info "Start development with: ./dev"
}

cmd_docs() {
    print_header "Documentation"

    if [ -f "$PROJECT_ROOT/DEVELOPMENT.md" ]; then
        info "Opening DEVELOPMENT.md..."
        if command -v less &> /dev/null; then
            less "$PROJECT_ROOT/DEVELOPMENT.md"
        elif command -v cat &> /dev/null; then
            cat "$PROJECT_ROOT/DEVELOPMENT.md" | head -50
            info "For full docs, see DEVELOPMENT.md"
        fi
    else
        error "DEVELOPMENT.md not found"
    fi
}

cmd_shell() {
    print_header "Interactive Development Shell"
    info "Python venv activated. Type 'exit' to quit."
    info "Available:"
    info "  - python manage_server.py --help"
    info "  - make help"
    info "  - cd backend/frontend to change directories"
    echo ""

    cd "$PROJECT_ROOT"
    bash -i
}

# Main entry point
main() {
    local command="${1:-help}"

    # Handle --help and --verbose flags
    if [[ "$command" == "--help" ]] || [[ "$command" == "-h" ]]; then
        command="help"
    fi

    case "$command" in
        help|-h|--help)         cmd_help ;;
        dev|start)              cmd_dev ;;
        backend)                cmd_backend ;;
        backend-kill)           cmd_backend_kill ;;
        backend-status)         cmd_backend_status ;;
        frontend)               cmd_frontend ;;
        logs)                   cmd_logs ;;
        status)                 cmd_status ;;
        health)                 cmd_health ;;
        stop)                   cmd_stop ;;
        restart)                cmd_restart ;;
        clean)                  cmd_clean ;;
        install)                cmd_install ;;
        setup)                  cmd_setup ;;
        docs)                   cmd_docs ;;
        shell)                  cmd_shell ;;
        *)
            error "Unknown command: $command"
            echo ""
            cmd_help
            exit 1
            ;;
    esac
}

# Run
main "$@"
